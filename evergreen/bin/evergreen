#!/usr/bin/ruby -w

class Evergreen
    def initialize()
        require "fileutils.rb"
        require "pathname.rb"
        
        # Cope with symbolic links to this script.
        @project_root = Pathname.new(__FILE__).realpath().dirname().dirname()
        @salma_hayek = Pathname.new("#{@project_root}/../salma-hayek").realpath()
        
        require "#{@salma_hayek}/bin/invoke-java.rb"
        require "#{@salma_hayek}/bin/target-os.rb"
        require "#{@salma_hayek}/bin/show-alert.rb"
        
        @supportAddress = "evergreen-users@googlegroups.com"
    end
    
    def launch()
        report_exceptions("Evergreen", @supportAddress) { launch0() }
    end
    
    def help()
        puts("usage: evergreen [--block] FILE[:LINE]")
        puts("       evergreen --new-workspace DIR [NAME]")
        puts("       evergreen --close-workspace NAME")
        exit(1)
    end
    
    def launch0()
        home = ENV["HOME"]
        
        if ARGV[0] == "--help"
            help()
        end
        
        shouldBlock = false
        if ARGV[0] == "--block"
            ARGV.shift()
            shouldBlock = true
        end
        
        shouldCreateNewWorkspace = false
        if ARGV[0] == "--new-workspace" || ARGV[0] == "--add-workspace"
            ARGV.shift()
            workspace_root = ARGV.shift()
            if workspace_root == nil
                help()
            end
            workspace_root = Pathname.new(workspace_root).realpath()
            workspace_name = ARGV.shift()
            if workspace_name == nil
                workspace_name = workspace_root.basename()
            end
            shouldCreateNewWorkspace = true
        end
        
        shouldCloseWorkspace = false
        if ARGV[0] == "--close-workspace" || ARGV[0] == "--remove-workspace"
            ARGV.shift()
            workspace_name = ARGV.shift()
            shouldCloseWorkspace = true
        end
        
        dot_directory = ENV["EVERGREEN_DOT_DIRECTORY"]
        if dot_directory == nil
            dot_directory = "#{home}/.e.edit.Edit"
            if target_os() == "Darwin"
                dot_directory = "#{home}/Library/Preferences/e.edit.Edit"
            end
        end
        
        # Allow the log file to be overridden. This is primarily for debugging
        # purposes, where one might want to tail -f the log file in a terminal.
        log_filename = ENV["EVERGREEN_LOG_FILENAME"]
        if log_filename == nil
            log_filename = "/tmp/edit.log.#$$"
        end
        
        if FileTest.directory?(dot_directory) == false
            FileUtils.mkdir_p(dot_directory)
        end
        
        serverPortPathname = Pathname.new(dot_directory) + "evergreen-server-port"
        # InAppClient's constructor stops anyone else from reading the .secret file.
        client = InAppClient.new(serverPortPathname)
        
        if shouldCreateNewWorkspace
            exit(send_command(client, "newWorkspace #{File.expand_path(workspace_root)}\t#{workspace_name}"))
        elsif shouldCloseWorkspace
            exit(send_command(client, "closeWorkspace #{workspace_name}"))
        end
        #send_command(client, "saveAll")
        #send_command(client, "rememberState")
        
        # Translate vi line number specifications.
        if ARGV[0] =~ /^\+(\d+)$/
            ARGV.shift()
            ARGV[0] = "#{ARGV[0]}:#$1"
        end
        
        # If we were given a filename, try to open it in an already-running instance.
        filename = ARGV[0]
        if filename != nil
            exit(send_command(client, "#{shouldBlock ? 'openAndBlock' : 'open'} #{File.expand_path(filename)}"))
        end
        
        invoker = Java.new("Evergreen", "e/edit/Evergreen")
        invoker.log_filename = log_filename
        invoker.add_pathname_property("preferencesDirectory", dot_directory)
        invoker.add_property("e.gui.HelpMenu.hasManual", "true")
        invoker.add_property("e.gui.HelpMenu.supportAddress", @supportAddress)
        invoker.add_property("e.gui.HelpMenu.supportSite", "http://groups.google.com/group/evergreen-users")
        invoker.launch()
    end
    
    def send_command(client, command)
        return client.sendCommand(command) ? 0 : 1
    end
end

Evergreen.new().launch()
